UBIFS=false
NETFS=false
SDFS=false
WORKFS=true
UPDATE_FS_VIDEO_FS=true
#ROOTFS_VERSION=00
#VIDEO_VERSION=00
BOOT=false

IP=192.168.1.161
SERVERIP=192.168.1.146
NETMASK=255.255.255.0
GATEWAY=192.168.1.2
UPDATE_VERSION=0000100001000000#######

echo Runing boot.scr
#check  nand flash

if  test 1 -ne "nand device 0" ;then
echo no nand flash
buzzer on
sleep 2
go 0x80800000
else
echo nand flash ok!
fi

#/*important: update_version = 00 00 10000 10000 00 #######*/
#/*                         check  |    |    |   |         */
#/*                           mini_boot |    |   |         */
#/*                                 bin_boot |   |         */
#/*                                       kernel |         */
#/*                                           logo         */
#


echo $UPDATE_VERSION

if  test 1 -eq "nand  device 0";then
if  test 1 -eq "mmc rescan 0" ;then
if test 0 -eq "saveenv" ;then 			#saveenv  0 or -1
setenv ipaddr $IP
setenv serverip  $SERVERIP
setenv netmask  $NETMASK
setenv gateway $GATEWAY

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! setup  god_mod#
version_check $UPDATE_VERSION

if $KERNEL ;then
#************* first step  "uImage" ****************
echo "************* first step  "uImage" ****************"
if  test 0 -eq "fatload mmc 0  0x81000000 uImage"  ; then  #fatload 0 or -1
nand erase  0x580000 0x440000
nand write 0x81000000 0x580000 0x440000
#!!!!!!!!!!!!!!#
KERNEL_SIZE_=0x29ea34
#version_update kernel $UPDATE_VERSION    /* update  at bootcmd*/
else 
echo fatload uImage  failed!
while true
do
buzzer on
sleep 1
buzzer off
done
fi
#************* first step  "uImage" ****************
fi

if $LOGO ;then
#************* second step  "logo" ****************
echo "************* second step  "logo" ****************"
if test 0 -eq "fatload mmc 0 0x81000000 well-logo_250_200.bin" ;then
nand erase  0x280000 0x300000
nand write 0x81000000 0x280000 0x300000
setenv logosize 250*200
saveenv
version_update logo $UPDATE_VERSION
else
echo fatload well-logo_250*200.bin  failed!
while true
do
buzzer on
sleep 1
buzzer off
done
fi
#************* second step  "logo" ****************
fi

if $BIN_BOOT ;then
#************* third step  "u-boot" ****************
echo "************* third step  "u-boot" ****************"
if test 0 -eq "fatload mmc 0 0x81000000 u-boot.bin" ;then
nand erase  0x20000 0x240000
nand write 0x81000000 0x20000 0x240000
version_update bin_boot $UPDATE_VERSION
else
echo fatload u-boot.bin  failed!
while true
do
buzzer on
sleep 1
buzzer off
done
fi
#************* third step  "u-boot" ****************
fi

if $MINI_BOOT ;then
#************* fouth step  "u-boot.min.nand" ****************
echo "************* fouth step  "u-boot.min.nand" ****************"
if test 0 -eq "fatload mmc 0 0x81000000 u-boot.min.nand" ;then
nand erase  0x0 0x20000
nand write 0x81000000 0x0 0x20000
version_update min_boot $UPDATE_VERSION
else
echo fatload u-boot.min.nand  failed!
while true
do
buzzer on
sleep 1
buzzer off
done
fi
#************* fouth step  "u-boot.min.nand" ****************
fi

setenv KERNEL_SIZE  $KERNEL_SIZE_
if $KERNEL || test "god_mod" = $UPDATE_VERSION ; then 
echo ********************set bootcmd************************
setenv bootcmd 'if test 1 -eq "mmc rescan 0"; then if run loadbootscript; then run bootscript; else echo In case ENV on MMC/SD is required; echo Please put a valid script named boot.scr on the card; echo Refer to the User Guide on how to generate the image; fi; else nand read 0x81000000 0x580000 '$KERNEL_SIZE';bootm; fi'
version_update kernel $UPDATE_VERSION 
fi

if $UBIFS ;then
#************* five step  "bootargs" ****************
echo "************* five step  "set boot args" ****************"
setenv bootargs 'console=ttyO0,115200n8 rootdelay=1  mem=256M earlyprintk notifyk.vpssm3_sva=0xBFd00000 vram=20M  ddr_mem=1024M ubi.mtd=5 root=ubi0:rootfs rootfstype=ubifs rootwait rw sync ip=192.168.1.166:192.168.1.146:192.168.1.2:255.255.255.0:WELL2:eth0:off'
fi

if $NETFS ;then
echo ***************** mount nfs filesystem ********************
setenv bootargs 'console=ttyO0,115200n8 rootdelay=5 rw mem=256M earlyprintk notifyk.vpssm3_sva=0xBFD00000 vram=20M ddr_mem=1024M root=/dev/nfs nfsroot=192.168.1.146:/opt/ok_rootfs  rw ip=192.168.1.164:192.168.1.146:192.168.1.0:255.255.255.0:WELL2:eth0:off'
fi 

if $SDFS ;then
echo ***************** mount sd filesystem ********************
setenv bootargs 'console=ttyO0,115200n8 rootdelay=5 rw mem=256M earlyprintk notifyk.vpssm3_sva=0xBFD00000 vram=20M ddr_mem=1024M root=/dev/nfs root=/dev/mmcblk-0p2  rw ip=192.168.1.164:192.168.1.146:192.168.1.0:255.255.255.0:WELL2:eth0:off'
fi

if $WORKFS;then
echo ***************** mount nfs filesystem ********************
setenv bootargs 'console=ttyO0,115200n8 rootdelay=5 rw mem=256M earlyprintk notifyk.vpssm3_sva=0xBFD00000 vram=20M ddr_mem=1024M root=/dev/nfs nfsroot=192.168.1.146:/opt/my_rootfs  rw ip=192.168.1.164:192.168.1.146:192.168.1.0:255.255.255.0:WELL2:eth0:off'
fi
saveenv
#************* five step  "set boot args" ****************
setenv  ROOTFS  $ROOTFS_VERSION
setenv  VIDEO  $VIDEO_VERSION
if $UPDATE_FS_VIDEO_FS ;then
echo ***************** mount sd filesystem ********************
setenv bootargs 'console=ttyO0,115200n8 rootdelay=5 rw mem=256M earlyprintk notifyk.vpssm3_sva=0xBFD00000 vram=20M ddr_mem=1024M root=/dev/nfs root=/dev/mmcblk-0p2  rw ip=192.168.1.164:192.168.1.146:192.168.1.0:255.255.255.0:WELL2:eth0:off  ROOTFS=$ROOTFS  VIDEO=$VIDEO'
fi

echo  Run boot.scr finish

if $BOOT  ;then
echo >>>>> system  go!! <<<<<<
boot
else
echo boot.scr ready
fi

else
	echo  nand flash can not be writed
	buzzer on
fi

else
	echo   no  mmc 0
	buzzer on
fi
else
	echo no nand flash
	buzzer on
fi

